// server.js
const express = require("express");
const path = require("path");
const fs = require("fs");
const fsp = require("fs/promises");
const morgan = require("morgan");
const helmet = require("helmet");
const cors = require("cors");
const rateLimit = require("express-rate-limit");
const { body, validationResult } = require("express-validator");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;
const ALLOW_ORIGIN = process.env.CORS_ORIGIN || "*";
const DATA_DIR = path.join(__dirname, "data");
const LEADS_FILE = path.join(DATA_DIR, "leads.json");
const APPTS_FILE = path.join(DATA_DIR, "appointments.json");

// ---------- Helpers ----------
async function ensureDataFiles() {
  if (!fs.existsSync(DATA_DIR)) await fsp.mkdir(DATA_DIR);
  if (!fs.existsSync(LEADS_FILE)) await fsp.writeFile(LEADS_FILE, "[]");
  if (!fs.existsSync(APPTS_FILE)) await fsp.writeFile(APPTS_FILE, "[]");
}
async function pushJson(file, obj) {
  const raw = await fsp.readFile(file, "utf8");
  const arr = JSON.parse(raw || "[]");
  arr.push(obj);
  await fsp.writeFile(file, JSON.stringify(arr, null, 2));
}
function uuid() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, c => {
    const r = (Math.random() * 16) | 0,
      v = c === "x" ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

// ---------- Middleware ----------
app.use(helmet());
app.use(morgan("tiny"));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors({ origin: ALLOW_ORIGIN }));
app.use(express.static(path.join(__dirname, "public")));

const apiLimiter = rateLimit({
  windowMs: 60 * 1000, // 1 Minute
  max: 30,             // 30 Requests/Minute/IP
});
app.use("/api", apiLimiter);

// ---------- Routes ----------
app.get("/api/health", (req, res) => res.json({ ok: true }));

// Kontaktformular
app.post(
  "/api/contact",
  [
    body("name").trim().isLength({ min: 2 }).withMessage("Name fehlt"),
    body("email").isEmail().withMessage("E-Mail ungültig"),
    body("phone").optional().isLength({ min: 5 }).withMessage("Telefon zu kurz"),
    body("message").trim().isLength({ min: 5 }).withMessage("Nachricht zu kurz")
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ ok: false, errors: errors.array() });
    }
    const entry = {
      id: uuid(),
      type: "contact",
      created_at: new Date().toISOString(),
      ...req.body
    };
    try {
      await pushJson(LEADS_FILE, entry);

      // Optional: E-Mail verschicken (wenn SMTP-Daten vorhanden)
      if (process.env.SMTP_HOST && process.env.TO_EMAIL) {
        const nodemailer = require("nodemailer");
        const transporter = nodemailer.createTransport({
          host: process.env.SMTP_HOST,
          port: Number(process.env.SMTP_PORT || 587),
          secure: !!process.env.SMTP_SECURE, // "true" für 465
          auth: process.env.SMTP_USER
            ? { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS }
            : undefined
        });
        await transporter.sendMail({
          from: process.env.FROM_EMAIL || "no-reply@example.com",
          to: process.env.TO_EMAIL,
          subject: `Neue Kontaktanfrage: ${entry.name}`,
          text: `Name: ${entry.name}\nE-Mail: ${entry.email}\nTelefon: ${entry.phone || "-"}\n\nNachricht:\n${entry.message}`
        });
      }

      res.json({ ok: true, id: entry.id });
    } catch (e) {
      console.error(e);
      res.status(500).json({ ok: false, error: "SERVER_WRITE_FAILED" });
    }
  }
);

// Termin-Anfrage
app.post(
  "/api/appointments",
  [
    body("name").trim().isLength({ min: 2 }),
    body("email").isEmail(),
    body("phone").trim().isLength({ min: 5 }),
    body("service").trim().isLength({ min: 2 }),
    body("preferred").trim().isLength({ min: 2 })
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ ok: false, errors: errors.array() });
    }
    const appt = {
      id: uuid(),
      type: "appointment",
      created_at: new Date().toISOString(),
      status: "requested",
      ...req.body
    };
    try {
      await pushJson(APPTS_FILE, appt);

      // Optional Mail an Betrieb
      if (process.env.SMTP_HOST && process.env.TO_EMAIL) {
        const nodemailer = require("nodemailer");
        const transporter = nodemailer.createTransport({
          host: process.env.SMTP_HOST,
          port: Number(process.env.SMTP_PORT || 587),
          secure: !!process.env.SMTP_SECURE,
          auth: process.env.SMTP_USER
            ? { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS }
            : undefined
        });
        await transporter.sendMail({
          from: process.env.FROM_EMAIL || "no-reply@example.com",
          to: process.env.TO_EMAIL,
          subject: `Neue Termin-Anfrage: ${appt.name} (${appt.service})`,
          text:
            `Name: ${appt.name}\nE-Mail: ${appt.email}\nTelefon: ${appt.phone}\n` +
            `Leistung: ${appt.service}\nWunschzeit: ${appt.preferred}\n\n` +
            `Hinweis: Status=requested. Bitte bestätigen/telefonisch abstimmen.`
        });
      }

      res.json({ ok: true, id: appt.id });
    } catch (e) {
      console.error(e);
      res.status(500).json({ ok: false, error: "SERVER_WRITE_FAILED" });
    }
  }
);

// Fallback 404 JSON für API
app.use("/api/*", (req, res) => res.status(404).json({ ok: false, error: "NOT_FOUND" }));

// Start
ensureDataFiles().then(() => {
  app.listen(PORT, () => console.log(`Server läuft auf http://localhost:${PORT}`));
});
